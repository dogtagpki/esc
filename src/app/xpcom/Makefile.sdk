#
# This Program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 2 of the License.
#
# This Program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this Program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA 02111-1307 USA.
#
# Copyright (C) 2005 Red Hat, Inc.
# All rights reserved.
# ***** END COPYRIGHT BLOCK *****

CORE_DEPTH      = ../../..

DEPLOY_OBJDIR	= $(CORE_DEPTH)/dist/$(OBJDIR)/esc_build

include $(CORE_DEPTH)/coreconf/config.mk

include $(CORE_DEPTH)/coreconf/rules.mk


# Change this to point at your Gecko SDK directory.
ifndef GECKO_SDK_PATH
GECKO_SDK_PATH =/usr/lib/xulrunner-sdk-1.9pre/sdk
endif
ifndef GECKO_INCLUDE_PATH
GECKO_INCLUDE_PATH=/usr/include/xulrunner-sdk-1.9pre
endif
ifndef GECKO_BIN_PATH
GECKO_BIN_PATH=/usr/lib/xulrunner-1.9pre
endif
XUL_FRAMEWORK_BIN_PATH=$(GECKO_BIN_PATH)


ifeq ($(OS_ARCH),Darwin)
ifndef GECKO_SDK_PATH
GECKO_SDK_PATH =/Users/jmagne/Desktop/gecko-sdk-mac-universal
endif
GECKO_INCLUDE_PATH=$(GECKO_SDK_PATH)/include
GECKO_BIN_PATH=$(GECKO_SDK_PATH)/bin
ifndef XUL_FRAMEWORK_PATH
XUL_FRAMEWORK_PATH=/Library/Frameworks/XUL.framework
endif
XUL_FRAMEWORK_BIN_PATH=$(XUL_FRAMEWORK_PATH)/Versions/Current

endif

ifeq ($(OS_ARCH),WINNT)

ifndef GECKO_SDK_PATH
GECKO_SDK_PATH =c:/xulrunner-sdk/xulrunner-sdk
endif

GECKO_INCLUDE_PATH=$(GECKO_SDK_PATH)/include
GECKO_SDK_INCLUDE_PATH=$(GECKO_SDK_PATH)/sdk/include
GECKO_BIN_PATH=$(GECKO_SDK_PATH)/bin
XUL_FRAMEWORK_BIN_PATH=$(GECKO_BIN_PATH)

endif

DEPLOY_OBJDIR	= $(CORE_DEPTH)/dist/$(OBJDIR)/esc_build

#Xulrunner constants

XULRUNNER_BIN_PATH      = $(GECKO_BIN_PATH)
XULRUNNER_EXEC          = xulrunner
ifeq ($(OS_ARCH), Darwin)
XULRUNNER_BIN_PATH      = $(XUL_FRAMEWORK_BIN_PATH)
XULRUNNER_EXEC          = xulrunner-bin
XULRUNNER_FRAME_DEST    = ESC.app/Contents/Frameworks/XUL.framework
XULRUNNER_FRAME_BASE    = ESC.app/Contents/Frameworks
endif

DEPLOY_OFFSET=/src
DESTDIR=

ifeq ($(OS_ARCH),Linux)
DEPLOY_OFFSET=/src
#DESTDIR=$(MOZ_OBJDIR)/install
endif


ifeq ($(OS_ARCH),WINNT)
CXX   = cl 
LINK  = link
endif


ifeq ($(OS_ARCH),Darwin)
ifdef PPC_BUILD
CXX = c++-3.3
CPPFLAGS += -arch ppc
else
CPPFLAGS +=  -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch i386
endif
endif

ifeq ($(OS_ARCH),Darwin)
GECKO_LD_LIBS=-L$(GECKO_SDK_PATH)/lib    -W1,  $(GECKO_SDK_PATH)/lib/libxpcomglue.a -L$(XUL_FRAMEWORK_BIN_PATH) -lnss3 -lssl3 -lsoftokn3 -lplds4 -lplc4 -lnssutil3
endif


ifeq ($(OS_ARCH),Linux)
CPPFLAGS += -fno-rtti \
                -fno-exceptions \
                -fshort-wchar -fPIC
GECKO_LD_LIBS=-L$(GECKO_SDK_PATH)/lib    $(GECKO_SDK_PATH)/lib/libxpcomglue.a -lnss3 -lcrmf -lssl3 -lsmime3 -lplds4 -lplc4 -lnspr4 -lpthread -ldl
endif

ifeq ($(OS_ARCH),WINNT)
CPPFLAGS = -MD	-DXP_WIN=1 -DXP_WIN32=1 -DXPCOM_GLUE -TP -nologo -W3 -Gy -EHsc -DNDEBUG
GECKO_LD_LIBS=/LIBPATH:$(GECKO_SDK_PATH)/lib    $(GECKO_SDK_PATH)/lib/xpcomglue.lib 
#$(GECKO_SDK_PATH)/lib/xul.lib
endif
 
# GCC only define which allows us to not have to #include mozilla-config 
# in every .cpp file.  If your not using GCC remove this line and add 
# #include "mozilla-config.h" to each of your .cpp files. 
#GECKO_CONFIG_INCLUDE = -include mozilla-config.h 

GECKO_DEFINES  = -DXPCOM_GLUE  -DMOZILLA_CLIENT

ifdef ESC_VERSION
GECKO_DEFINES += -DESC_VERSION=$(ESC_VERSION)
endif

NSS_INCLUDE =  /usr/include/nss3
NSPR_INCLUDE =  /usr/include/nspr4

 
GECKO_INCLUDES = -I $(GECKO_SDK_PATH)/include -I $(GECKO_INCLUDE_PATH) -I $(NSPR_INCLUDE) -I $(NSS_INCLUDE) -I $(GECKO_INCLUDE_PATH)/xpcom


COOL_INCLUDES = -I $(CORE_INC)/ckymanager -I $(CORE_INC)/httpchuncked
COOL_LDFLAGS  =  -L$(CORE_DIST)/lib  -lckymanager -lhttpchunked $(CKY_LIB_LDD) -lckyapplet 

OBJECT		= rhCoolKey.o

ifeq ($(OS_ARCH), WINNT)
GECKO_INCLUDES		+= -I $(GECKO_SDK_PATH)/sdk/include
OBJECT			= rhCoolKey.obj
OBJECTCSP		= CoolKeyCSP.obj 
COOL_LDFLAGS		=   -IMPLIB:fake-import /LIBPATH:$(CORE_DIST)/lib ckymanager.lib httpchunked.lib $(GECKO_LD_LIBS) nss3.lib ssl3.lib smime3.lib softokn3.lib  /LIBPATH:$(CKY_LIB_LDD) libckyapplet.lib  crypt32.lib kernel32.lib user32.lib gdi32.lib winmm.lib wsock32.lib advapi32.lib /NODEFAULTLIB:libc.lib
endif

ifeq ($(OS_ARCH),Darwin)
COOL_LDFLAGS += -lsystemStubs  -framework Carbon   -bundle -lm
endif
 
GECKO_LDFLAGS= -lnspr4 \
	-lplds4  -lplc4 -ldl  -lpthread  -Wl -z   \
        $(GECKO_LD_LIBS)

ifeq ($(OS_ARCH),WINNT)

GECKO_LDFLAGS= nspr4.lib plds4.lib plc4.lib $(GECKO_LD_LIBS) 
endif

FILES = rhCoolKey.cpp 
FILESCSP = CoolKeyCSP.cpp

ifeq ($(OS_ARCH),Linux)
TARGET = librhCoolKey.so
endif

ifeq ($(OS_ARCH),Darwin)
TARGET = librhCoolKey.dylib
endif

ifeq ($(OS_ARCH),WINNT)
TARGET = rhCoolKey.dll
endif

install::
ifdef DESTDIR
         cp -rf $(DEPLOY_OBJDIR)/esc/* $(DESTDIR)
         cp -f  $(CORE_DIST)/bin/escd $(DESTDIR)
endif


all::	export libs

libs:: 
	$(GECKO_BIN_PATH)/xpidl -v -I $(GECKO_SDK_PATH)/idl -I $(NSPR_INCLUDE) -m header rhIKeyNotify.idl

	$(GECKO_BIN_PATH)/xpidl -v -I $(GECKO_SDK_PATH)/idl -I $(NSPR_INCLUDE) -m typelib rhIKeyNotify.idl

	$(GECKO_BIN_PATH)/xpidl -v -I $(GECKO_SDK_PATH)/idl -I $(NSPR_INCLUDE) -m header rhICoolKey.idl

	$(GECKO_BIN_PATH)/xpidl -v -I $(GECKO_SDK_PATH)/idl -I $(NSPR_INCLUDE) -m typelib rhICoolKey.idl

ifeq ($(OS_ARCH),Darwin)
	$(CXX)   $(CPPFLAGS)  -c  -o $(OBJECT)  $(GECKO_CONFIG_INCLUDE) $(GECKO_DEFINES) $(GECKO_INCLUDES) $(COOL_INCLUDES) $(CXXFLAGS) $(FILES)
	$(CXX)   $(CPPFLAGS)  -o $(TARGET) $(OBJECT)  $(GECKO_DEFINES) $(GECKO_INCLUDES)  $(GECKO_LDFLAGS) $(COOL_LDFLAGS)
	chmod +x $(TARGET)
endif

ifeq ($(OS_ARCH),Linux)
	$(CXX)   $(CPPFLAGS) -c -o $(OBJECT) $(GECKO_CONFIG_INCLUDE) $(GECKO_DEFINES) $(GECKO_INCLUDES) $(COOL_INCLUDES) $(CXXFLAGS) $(FILES)

	$(CXX)   $(CPPFLAGS) -shared -o $(TARGET) $(OBJECT)  $(GECKO_DEFINES) $(GECKO_INCLUDES)  $(GECKO_LDFLAGS) $(COOL_LDFLAGS)
        chmod +x $(TARGET)
        strip $(TARGET)
endif

ifeq ($(OS_ARCH),WINNT)
	$(CXX)   $(CPPFLAGS)  -Fo$(OBJECT) -c $(GECKO_CONFIG_INCLUDE) $(GECKO_DEFINES) $(GECKO_INCLUDES) $(COOL_INCLUDES) $(CXXFLAGS) $(FILES) 

	$(CXX)   $(CPPFLAGS)  -Fo$(OBJECTCSP) -c $(GECKO_CONFIG_INCLUDE) $(GECKO_DEFINES) $(GECKO_INCLUDES) $(COOL_INCLUDES) $(CXXFLAGS) $(FILESCSP)


	$(LINK)  -NOLOGO -DLL -OUT:$(TARGET) $(OBJECT) $(OBJECTCSP) $(GECKO_LDFLAGS)  $(GECKO_DEFINES) $(COOL_LDFLAGS)
endif

export::
	touch Makefile.in
	echo "Export" 
clean:: 
	echo "Cleaning up."
	rm  -f $(TARGET)
	rm  -f *.xpt
	rm  -f *.so
	rm  -f *.o
	rm  -f *.dylib
	rm  -f *.obj
	rm -rf $(DEPLOY_OBJDIR)
	rm -rf $(CORE_DEPTH)$(DEPLOY_OFFSET)/app/xul/esc/esc
ifeq ($(OS_ARCH),Darwin)
	rm -rf ppc
	rm -rf i386
endif



deploy: $(DEPLOY_OBJDIR)
	echo "Deploy."

$(DEPLOY_OBJDIR):
	echo "Installing!"
	$(NSINSTALL) ./$(LIB_PREFIX)rhCoolKey.$(DLL_SUFFIX) $(CORE_DEPTH)$(DEPLOY_OFFSET)/app/xul/esc/components
	$(NSINSTALL) ./*.xpt $(CORE_DEPTH)$(DEPLOY_OFFSET)/app/xul/esc/components
	echo  "Creating $(DEPLOY_OBJDIR)"
	mkdir $(DEPLOY_OBJDIR)

	cd $(CORE_DEPTH)/$(DEPLOY_OFFSET)/app/xul/esc; zip -r test.zip * -x *\CVS\* \*.fix*; unzip -d esc test.zip ; rm -f test.zip
	$(XUL_FRAMEWORK_BIN_PATH)/$(XULRUNNER_EXEC) --install-app $(CORE_DEPTH)$(DEPLOY_OFFSET)/app/xul/esc/esc  $(DEPLOY_OBJDIR)

ifeq ($(OS_ARCH), Darwin)
	mkdir $(DEPLOY_OBJDIR)/$(XULRUNNER_FRAME_BASE)
	cp -Rf -v $(XUL_FRAMEWORK_PATH) $(DEPLOY_OBJDIR)/$(XULRUNNER_FRAME_DEST)
endif

ifeq ($(OS_ARCH),Linux)
endif
ifeq ($(OS_ARCH),WINNT)
	mkdir -p $(DEPLOY_OBJDIR)/$(XULRUNNER_FRAME_DEST)/esc/xulrunner
	cp -rf	$(XUL_FRAMEWORK_BIN_PATH)/*  $(DEPLOY_OBJDIR)/$(XULRUNNER_FRAME_DEST)/esc/xulrunner
endif
ifdef DESTDIR
	$(NSINSTALL) $(DEPLOY_OBJDIR) $(DESTDIR)
endif

